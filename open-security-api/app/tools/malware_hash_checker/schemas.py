"""
Schemas for Malware Hash Checker Tool
"""

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime


class MalwareHashInput(BaseModel):
    """Input schema for malware hash checking"""
    hash_value: str = Field(
        description="Hash value to check (MD5, SHA1, SHA256, or SHA512)"
    )
    hash_type: Optional[str] = Field(
        default=None,
        description="Hash type (auto-detected if not specified)"
    )
    check_multiple_sources: bool = Field(
        default=True,
        description="Check against multiple threat intelligence sources"
    )
    include_metadata: bool = Field(
        default=True,
        description="Include detailed malware metadata if available"
    )
    check_reputation: bool = Field(
        default=True,
        description="Check file reputation and trust score"
    )


class ThreatIntelligenceResult(BaseModel):
    """Threat intelligence result from a source"""
    source_name: str = Field(description="Name of the threat intelligence source")
    is_malicious: bool = Field(description="Whether hash is flagged as malicious")
    detection_ratio: Optional[str] = Field(description="Detection ratio (e.g., '45/70')")
    threat_type: Optional[str] = Field(description="Type of threat detected")
    malware_family: Optional[str] = Field(description="Malware family name")
    confidence_score: float = Field(description="Confidence score (0-100)")
    last_seen: Optional[datetime] = Field(description="When hash was last seen")
    scan_date: Optional[datetime] = Field(description="When hash was last scanned")


class MalwareMetadata(BaseModel):
    """Detailed malware metadata"""
    file_names: List[str] = Field(description="Known file names")
    file_size: Optional[int] = Field(description="File size in bytes")
    file_type: Optional[str] = Field(description="File type/format")
    first_seen: Optional[datetime] = Field(description="First seen date")
    last_seen: Optional[datetime] = Field(description="Last seen date")
    submission_count: Optional[int] = Field(description="Number of submissions")
    detection_names: List[str] = Field(description="Detection names from various engines")
    yara_rules: List[str] = Field(description="Matching YARA rules")
    behavioral_analysis: Dict[str, Any] = Field(description="Behavioral analysis results")


class ReputationAnalysis(BaseModel):
    """File reputation analysis"""
    trust_score: float = Field(description="Trust score (0-100, higher is more trustworthy)")
    reputation_level: str = Field(description="Reputation level (trusted, neutral, suspicious, malicious)")
    vendor_detections: int = Field(description="Number of security vendors detecting as malicious")
    total_vendors: int = Field(description="Total number of vendors checked")
    community_votes: Dict[str, int] = Field(description="Community votes (malicious, harmless)")


class HashValidation(BaseModel):
    """Hash validation results"""
    is_valid_hash: bool = Field(description="Whether hash format is valid")
    detected_hash_type: str = Field(description="Detected hash algorithm")
    hash_length: int = Field(description="Hash length in characters")
    hash_format_issues: List[str] = Field(description="Hash format issues if any")


class MalwareHashOutput(BaseModel):
    """Output schema for malware hash analysis"""
    success: bool = Field(description="Whether the analysis was successful")
    hash_value: str = Field(description="Original hash value")
    hash_validation: HashValidation = Field(description="Hash validation results")
    threat_intelligence: List[ThreatIntelligenceResult] = Field(description="Results from threat intelligence sources")
    malware_metadata: Optional[MalwareMetadata] = Field(description="Detailed malware metadata if available")
    reputation_analysis: ReputationAnalysis = Field(description="File reputation analysis")
    overall_verdict: str = Field(description="Overall verdict (clean, suspicious, malicious)")
    risk_score: float = Field(description="Overall risk score (0-100)")
    recommendations: List[str] = Field(description="Security recommendations")
    analysis_timestamp: datetime = Field(description="When analysis was performed")
    error: Optional[str] = Field(default=None, description="Error message if analysis failed")
