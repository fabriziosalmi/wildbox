"""
Schemas for Network Vulnerability Scanner Tool
"""

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime


class NetworkVulnScanInput(BaseModel):
    """Input schema for network vulnerability scanning"""
    target: str = Field(
        description="Target IP address, hostname, or CIDR range to scan"
    )
    scan_type: str = Field(
        default="quick",
        description="Scan type: quick, full, stealth, or aggressive"
    )
    port_range: Optional[str] = Field(
        default=None,
        description="Port range to scan (e.g., '1-1000', '22,80,443')"
    )
    enable_service_detection: bool = Field(
        default=True,
        description="Enable service version detection"
    )
    enable_os_detection: bool = Field(
        default=False,
        description="Enable operating system detection"
    )
    check_common_vulns: bool = Field(
        default=True,
        description="Check for common vulnerabilities"
    )
    timeout: int = Field(
        default=300,
        ge=30,
        le=3600,
        description="Scan timeout in seconds"
    )


class PortScanResult(BaseModel):
    """Individual port scan result"""
    port: int = Field(description="Port number")
    protocol: str = Field(description="Protocol (tcp/udp)")
    state: str = Field(description="Port state (open/closed/filtered)")
    service: Optional[str] = Field(description="Detected service name")
    version: Optional[str] = Field(description="Service version if detected")
    banner: Optional[str] = Field(description="Service banner if available")


class VulnerabilityResult(BaseModel):
    """Vulnerability detection result"""
    vuln_id: str = Field(description="Vulnerability identifier")
    severity: str = Field(description="Vulnerability severity")
    title: str = Field(description="Vulnerability title")
    description: str = Field(description="Vulnerability description")
    affected_service: str = Field(description="Affected service/port")
    cvss_score: Optional[float] = Field(description="CVSS score if available")
    cve_ids: List[str] = Field(description="Related CVE identifiers")
    remediation: str = Field(description="Remediation advice")


class HostInfo(BaseModel):
    """Host information"""
    ip_address: str = Field(description="IP address")
    hostname: Optional[str] = Field(description="Resolved hostname")
    os_guess: Optional[str] = Field(description="Operating system guess")
    mac_address: Optional[str] = Field(description="MAC address if available")
    vendor: Optional[str] = Field(description="Network vendor")
    is_up: bool = Field(description="Whether host is responsive")
    response_time: Optional[float] = Field(description="Average response time in ms")


class NetworkVulnScanOutput(BaseModel):
    """Output schema for network vulnerability scanning"""
    success: bool = Field(description="Whether the scan was successful")
    target: str = Field(description="Original target specification")
    scan_type: str = Field(description="Type of scan performed")
    host_info: HostInfo = Field(description="Target host information")
    open_ports: List[PortScanResult] = Field(description="List of open ports found")
    vulnerabilities: List[VulnerabilityResult] = Field(description="Vulnerabilities detected")
    security_score: float = Field(description="Overall security score (0-100)")
    risk_level: str = Field(description="Risk level (low, medium, high, critical)")
    scan_duration: float = Field(description="Scan duration in seconds")
    recommendations: List[str] = Field(description="Security recommendations")
    scan_timestamp: datetime = Field(description="When the scan was performed")
    error: Optional[str] = Field(default=None, description="Error message if scan failed")
