"""
FIXED Network Scanner Tool - Example of proper implementation

This is a demonstration of how to fix the issues found in the original network_scanner tool:
- Replaced bare except clauses with specific exception handling
- Added proper input validation
- Implemented resource management
- Added rate limiting
- Improved error handling and logging
"""

import asyncio
import socket
import subprocess
import ipaddress
import time
import logging
from datetime import datetime
from typing import List, Optional, Dict, Any
from contextlib import asynccontextmanager

# Import fixed utilities
from app.utils.tool_utils import (
    InputValidator, SessionManager, ToolExceptionHandler, 
    RateLimiter, MetricsCollector
)
from app.config.tool_config import ToolConfig, SecurityConfig

try:
    from .schemas import NetworkScannerInput, NetworkScannerOutput, HostInfo
except ImportError:
    from schemas import NetworkScannerInput, NetworkScannerOutput, HostInfo

logger = logging.getLogger(__name__)

# Tool metadata
TOOL_INFO = {
    "name": "Network Scanner (Fixed)",
    "description": "Secure network scanner with proper error handling and resource management",
    "category": "network_scanning",
    "author": "Wildbox Security",
    "version": "2.0.0",
    "input_schema": NetworkScannerInput,
    "output_schema": NetworkScannerOutput,
    "tags": ["network", "scanning", "discovery", "hosts"]
}

# Common ports to scan for TCP scans
COMMON_PORTS = [21, 22, 23, 25, 53, 80, 110, 135, 139, 143, 443, 445, 993, 995, 1723, 3389, 5900, 8080]

# Initialize rate limiter and metrics
rate_limiter = RateLimiter(max_requests=50, time_window=60)  # 50 requests per minute
metrics = MetricsCollector()


class NetworkScanner:
    """Secure network scanner implementation"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.timeout = config.get('timeout', ToolConfig.DEFAULT_TIMEOUT)
        self.max_concurrent = config.get('max_concurrent', 50)
        
    async def ping_host(self, ip: str) -> HostInfo:
        """Ping a single host to check if it's alive with proper error handling"""
        start_time = time.time()
        
        # Validate IP address first
        try:
            InputValidator.validate_ip(ip)
        except ValueError as e:
            logger.warning(f"Invalid IP address {ip}: {e}")
            return HostInfo(
                ip_address=ip,
                hostname=None,
                status="invalid",
                response_time=None,
                error=str(e)
            )
        
        # Check if IP is allowed to be scanned
        scan_validation = SecurityConfig.validate_scan_target(ip)
        if not scan_validation['allowed']:
            logger.warning(f"IP {ip} not allowed for scanning: {scan_validation['issues']}")
            return HostInfo(
                ip_address=ip,
                hostname=None,
                status="restricted",
                response_time=None,
                error="Target not allowed for scanning"
            )
        
        # Apply rate limiting
        await rate_limiter.acquire()
        
        try:
            # Use subprocess to ping with proper timeout handling
            cmd = ['ping', '-c', '1', '-W', str(int(self.timeout * 1000)), ip]
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            try:
                stdout, stderr = await asyncio.wait_for(
                    process.communicate(), 
                    timeout=self.timeout + 5  # Add buffer for subprocess timeout
                )
            except asyncio.TimeoutError:
                process.kill()
                await process.wait()
                return HostInfo(
                    ip_address=ip,
                    hostname=None,
                    status="timeout",
                    response_time=None,
                    error=f"Ping timeout after {self.timeout}s"
                )
            
            if process.returncode == 0:
                # Host is alive, try to get hostname
                hostname = await self._get_hostname(ip)
                response_time = (time.time() - start_time) * 1000
                
                return HostInfo(
                    ip_address=ip,
                    hostname=hostname,
                    status="alive",
                    response_time=response_time
                )
            else:
                return HostInfo(
                    ip_address=ip,
                    hostname=None,
                    status="dead",
                    response_time=None
                )
        
        except OSError as e:
            logger.error(f"OS error pinging {ip}: {e}")
            return HostInfo(
                ip_address=ip,
                hostname=None,
                status="error",
                response_time=None,
                error=f"OS error: {e}"
            )
        except Exception as e:
            logger.error(f"Unexpected error pinging {ip}: {e}")
            return HostInfo(
                ip_address=ip,
                hostname=None,
                status="error",
                response_time=None,
                error=f"Unexpected error: {type(e).__name__}"
            )
    
    async def _get_hostname(self, ip: str) -> Optional[str]:
        """Get hostname for IP address with timeout"""
        try:
            # Use asyncio to make hostname resolution non-blocking
            loop = asyncio.get_event_loop()
            hostname = await asyncio.wait_for(
                loop.run_in_executor(None, socket.gethostbyaddr, ip),
                timeout=5.0  # 5 second timeout for hostname resolution
            )
            return hostname[0]
        except (socket.herror, socket.gaierror, OSError, asyncio.TimeoutError):
            # These are expected for many IPs
            return None
        except Exception as e:
            logger.debug(f"Unexpected error resolving hostname for {ip}: {e}")
            return None
    
    async def tcp_scan_host(self, ip: str) -> HostInfo:
        """Perform TCP scan on a host to detect open ports with proper error handling"""
        # First ping the host
        host_info = await self.ping_host(ip)
        
        if host_info.status != "alive":
            return host_info
        
        # Scan common ports with connection pooling
        open_ports = []
        semaphore = asyncio.Semaphore(self.max_concurrent)
        
        async def scan_port(port: int) -> Optional[int]:
            """Scan a single port with semaphore for concurrency control"""
            async with semaphore:
                # Check if port is restricted
                if SecurityConfig.is_port_restricted(port):
                    logger.debug(f"Skipping restricted port {port}")
                    return None
                
                try:
                    # Apply rate limiting
                    await rate_limiter.acquire()
                    
                    future = asyncio.open_connection(ip, port)
                    reader, writer = await asyncio.wait_for(future, timeout=self.timeout)
                    
                    # Properly close the connection
                    writer.close()
                    await writer.wait_closed()
                    
                    logger.debug(f"Port {port} open on {ip}")
                    return port
                    
                except (asyncio.TimeoutError, ConnectionRefusedError, OSError):
                    # These are expected for closed ports
                    return None
                except Exception as e:
                    logger.debug(f"Unexpected error scanning port {port} on {ip}: {e}")
                    return None
        
        # Scan all ports concurrently
        try:
            port_tasks = [scan_port(port) for port in COMMON_PORTS]
            results = await asyncio.gather(*port_tasks, return_exceptions=True)
            
            # Filter successful results
            for result in results:
                if isinstance(result, int):  # Successful port scan
                    open_ports.append(result)
                elif isinstance(result, Exception):
                    logger.debug(f"Port scan exception: {result}")
        
        except Exception as e:
            logger.error(f"Error during port scanning of {ip}: {e}")
            host_info.error = f"Port scan error: {e}"
        
        # Update host info with port scan results
        host_info.open_ports = sorted(open_ports) if open_ports else []
        
        return host_info
    
    def generate_ip_list(self, network: str) -> List[str]:
        """Generate list of IP addresses from CIDR notation with proper validation"""
        try:
            # Try CIDR notation first
            network_obj = ipaddress.ip_network(network, strict=False)
            
            # Limit the number of IPs to prevent abuse
            max_ips = SecurityConfig.MAX_BATCH_SIZE
            ips = list(network_obj.hosts())
            
            if len(ips) > max_ips:
                logger.warning(f"Network {network} contains {len(ips)} IPs, limiting to {max_ips}")
                ips = ips[:max_ips]
            
            return [str(ip) for ip in ips]
            
        except ValueError:
            # Try to parse as single IP
            try:
                InputValidator.validate_ip(network)
                return [network]
            except ValueError:
                # Try range notation like 192.168.1.1-10
                if '-' in network:
                    try:
                        base, range_part = network.rsplit('.', 1)
                        if '-' in range_part:
                            start, end = range_part.split('-')
                            start_num = int(start)
                            end_num = int(end)
                            
                            if not (0 <= start_num <= 255 and 0 <= end_num <= 255):
                                raise ValueError("IP octets must be 0-255")
                            
                            if end_num < start_num:
                                raise ValueError("End of range must be >= start")
                            
                            # Limit range size
                            if (end_num - start_num + 1) > SecurityConfig.MAX_BATCH_SIZE:
                                raise ValueError(f"IP range too large, max {SecurityConfig.MAX_BATCH_SIZE} IPs")
                            
                            ips = []
                            for i in range(start_num, end_num + 1):
                                ip = f"{base}.{i}"
                                InputValidator.validate_ip(ip)  # Validate each IP
                                ips.append(ip)
                            
                            return ips
                    except (ValueError, IndexError) as e:
                        raise ValueError(f"Invalid IP range format: {e}")
                
                raise ValueError(f"Invalid network format: {network}")


async def execute_tool(input_data: NetworkScannerInput) -> NetworkScannerOutput:
    """Execute the network scanner tool with comprehensive error handling"""
    start_time = datetime.now()
    logger.info(f"Starting network scan for {input_data.network}")
    
    # Get tool configuration
    tool_config = ToolConfig.get_tool_config('network_scanner')
    
    # Initialize scanner
    scanner = NetworkScanner(tool_config)
    
    # Initialize metrics tracking
    with metrics.timer("network_scanner.execution_time"):
        try:
            # Validate input
            if not input_data.network:
                raise ValueError("Network parameter is required")
            
            # Generate IP list
            try:
                ip_list = scanner.generate_ip_list(input_data.network)
                logger.info(f"Generated {len(ip_list)} IPs to scan")
            except ValueError as e:
                metrics.counter("network_scanner.validation_error").increment()
                return NetworkScannerOutput(
                    target_network=input_data.network,
                    scan_type=input_data.scan_type,
                    timestamp=start_time,
                    execution_time=(datetime.now() - start_time).total_seconds(),
                    hosts_discovered=[],
                    total_hosts_scanned=0,
                    alive_hosts=0,
                    success=False,
                    error=f"Invalid network format: {e}"
                )
            
            # Check if we have any IPs to scan
            if not ip_list:
                return NetworkScannerOutput(
                    target_network=input_data.network,
                    scan_type=input_data.scan_type,
                    timestamp=start_time,
                    execution_time=(datetime.now() - start_time).total_seconds(),
                    hosts_discovered=[],
                    total_hosts_scanned=0,
                    alive_hosts=0,
                    success=True,
                    message="No valid IPs to scan in the specified network"
                )
            
            # Perform scanning based on scan type
            hosts_discovered = []
            
            if input_data.scan_type.lower() == "tcp":
                logger.info(f"Performing TCP scan on {len(ip_list)} hosts")
                scan_tasks = [scanner.tcp_scan_host(ip) for ip in ip_list]
                results = await asyncio.gather(*scan_tasks, return_exceptions=True)
                
                for result in results:
                    if isinstance(result, HostInfo):
                        hosts_discovered.append(result)
                    elif isinstance(result, Exception):
                        logger.error(f"Scan task failed: {result}")
            
            else:  # Default to ping scan
                logger.info(f"Performing ping scan on {len(ip_list)} hosts")
                scan_tasks = [scanner.ping_host(ip) for ip in ip_list]
                results = await asyncio.gather(*scan_tasks, return_exceptions=True)
                
                for result in results:
                    if isinstance(result, HostInfo):
                        hosts_discovered.append(result)
                    elif isinstance(result, Exception):
                        logger.error(f"Ping task failed: {result}")
            
            # Calculate statistics
            alive_hosts = len([host for host in hosts_discovered if host.status == "alive"])
            execution_time = (datetime.now() - start_time).total_seconds()
            
            # Update metrics
            metrics.counter("network_scanner.success").increment()
            metrics.gauge("network_scanner.hosts_scanned", len(ip_list))
            metrics.gauge("network_scanner.alive_hosts", alive_hosts)
            
            logger.info(f"Network scan completed: {alive_hosts}/{len(ip_list)} hosts alive in {execution_time:.2f}s")
            
            return NetworkScannerOutput(
                target_network=input_data.network,
                scan_type=input_data.scan_type,
                timestamp=start_time,
                execution_time=execution_time,
                hosts_discovered=hosts_discovered,
                total_hosts_scanned=len(ip_list),
                alive_hosts=alive_hosts,
                success=True
            )
        
        except ValueError as e:
            # Input validation errors
            metrics.counter("network_scanner.validation_error").increment()
            logger.warning(f"Validation error: {e}")
            return NetworkScannerOutput(
                target_network=input_data.network,
                scan_type=input_data.scan_type,
                timestamp=start_time,
                execution_time=(datetime.now() - start_time).total_seconds(),
                hosts_discovered=[],
                total_hosts_scanned=0,
                alive_hosts=0,
                success=False,
                error=f"Invalid input: {e}"
            )
        
        except asyncio.TimeoutError:
            # Timeout errors
            metrics.counter("network_scanner.timeout_error").increment()
            logger.error("Network scan timed out")
            return NetworkScannerOutput(
                target_network=input_data.network,
                scan_type=input_data.scan_type,
                timestamp=start_time,
                execution_time=(datetime.now() - start_time).total_seconds(),
                hosts_discovered=[],
                total_hosts_scanned=0,
                alive_hosts=0,
                success=False,
                error="Scan operation timed out"
            )
        
        except Exception as e:
            # Unexpected errors
            metrics.counter("network_scanner.error").increment()
            error_info = ToolExceptionHandler.handle_generic_error(e, "network_scanner")
            logger.error(f"Unexpected error: {e}", exc_info=True)
            
            return NetworkScannerOutput(
                target_network=input_data.network,
                scan_type=input_data.scan_type,
                timestamp=start_time,
                execution_time=(datetime.now() - start_time).total_seconds(),
                hosts_discovered=[],
                total_hosts_scanned=0,
                alive_hosts=0,
                success=False,
                error=error_info['error']
            )


# Export tool info for registration
tool_info = TOOL_INFO
